package ru.sicuro.PlanningPokerBot.service.button.task;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.ParseMode;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import ru.sicuro.PlanningPokerBot.model.*;
import ru.sicuro.PlanningPokerBot.reposirory.PlanningSessionRepository;
import ru.sicuro.PlanningPokerBot.reposirory.TaskRepository;
import ru.sicuro.PlanningPokerBot.reposirory.TeamMemberRepository;
import ru.sicuro.PlanningPokerBot.reposirory.TeamRepository;
import ru.sicuro.PlanningPokerBot.service.PlanningPokerBot;
import ru.sicuro.PlanningPokerBot.service.button.ButtonHandler;

import java.util.ArrayList;
import java.util.List;

@Slf4j
@AllArgsConstructor
@Service
public class TaskStartVoteStepButtonHandler implements ButtonHandler {
    private final TeamRepository teamRepository;
    private final TaskRepository taskRepository;
    private final TeamMemberRepository teamMemberRepository;
    private final PlanningSessionRepository planningSessionRepository;

    @Override
    public String getCallbackData() {
        return "TASK_START_VOTE_STEP_BUTTON";
    }

    @Override
    public void handle(Update update, PlanningPokerBot bot) {
        long chatId = update.getCallbackQuery().getMessage().getChatId();
        int messageId = update.getCallbackQuery().getMessage().getMessageId();
        String callbackQuery = update.getCallbackQuery().getData();
        String teamId = callbackQuery.split(" ")[1];

        // –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º –∫–æ—Ç–æ—Ä—ã –±—ã–ª —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω
        EditMessageText message = new EditMessageText();
        message.setChatId(chatId);
        message.setMessageId(messageId);
        message.setDisableWebPagePreview(true);
        message.setParseMode(ParseMode.HTML);

        // –ü–æ–ª—É—á–∏–º –∫–æ–º–∞–Ω–¥—É
        Team team = teamRepository.findById(Long.valueOf(teamId)).orElseThrow(() -> new IllegalArgumentException("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"));
        // –ü–æ–ª—É—á–∏–º –∑–∞–¥–∞—á–∏ –∫–æ–º–∞–Ω–¥—ã
        List<Task> tasks = taskRepository.findByTeamAndStatus(team, TaskState.PENDING);

        String messageForMembers = String.format("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s(%s) –Ω–∞—á–∞–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ \n",
                team.getCreatedBy().getFullName(),
                team.getCreatedBy().getUsername());

        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder
                .append("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –∫–æ–º–∞–Ω–¥—ã <b>‚öîÔ∏è")
                .append(bot.escapeHtml(team.getName()))
                .append("</b>:")
                .append("\n\n");

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ id
        tasks.sort(((tasks1, tasks2) -> Long.compare(tasks1.getId(), tasks2.getId())));

        // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–Ω–æ–ø–æ–∫
        List<List<InlineKeyboardButton>> rowsInLine = new ArrayList<>();
        boolean started = false;

        if (!tasks.isEmpty()) {
            for (Task task : tasks) {
                // –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                if (task.getLink() != null) {
                    stringBuilder
                            .append("üéØ<a href='")
                            .append(bot.escapeHtml(task.getLink()))
                            .append("'>")
                            .append(bot.escapeHtml(task.getTitle()))
                            .append("</a>")
                            .append("\n");
                } else {
                    stringBuilder
                            .append("üéØ")
                            .append(bot.escapeHtml(task.getTitle()))
                            .append("\n");
                }

                // –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
                List<InlineKeyboardButton> rowInLine = new ArrayList<>();
                var button = new InlineKeyboardButton();
                button.setText(task.getTitle());
                button.setCallbackData(String.format("TASK_START_VOTE_STEP_2_BUTTON %s", task.getId()));
                rowInLine.add(button);
                rowsInLine.add(rowInLine);
            }

            messageForMembers += stringBuilder.toString();
            stringBuilder
                    .append("\n")
                    .append("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É:");
            started = true;
        } else {
            stringBuilder.delete(0, stringBuilder.length());
            stringBuilder
                    .append("–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á!")
                    .append("\n")
                    .append("–°–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞—á—É –≤ –º–µ–Ω—é –∑–∞–¥–∞—á");
        }

        // –£—Å—Ç–∞–Ω–æ–≤–∏–º —Ç–µ–∫—Å—Ç
        message.setText(stringBuilder.toString());

        // –£—Å—Ç–∞–Ω–æ–≤–∏–º –∫–Ω–æ–ø–∫–∏
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(rowsInLine);
        message.setReplyMarkup(markup);

        bot.sendMessage(message);

        // –°–æ—Ö—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Å—Å–∏–∏
        PlanningSession planningSession = new PlanningSession();
        planningSession.setTeam(team);
        planningSessionRepository.save(planningSession);

        if (!started) {
            // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞—á, —Ç–æ –Ω–µ –æ–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            return;
        } else {
            log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å({}) –Ω–∞—á–∞–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ. –ù–æ–º–µ—Ä —Å–µ—Å—Å–∏–∏:",
                    chatId);
        }

        // –û–ø–æ–≤–µ—Å—Ç–∏–º –∫–æ–º–∞–Ω–¥—É –æ –Ω–∞—á–∞–ª–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        List<TeamMember> teamMembers = teamMemberRepository.findByTeam(team);

        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(messageForMembers);
        sendMessage.setDisableWebPagePreview(true);
        sendMessage.setParseMode(ParseMode.HTML);

        for (TeamMember teamMember : teamMembers) {
            sendMessage.setChatId(teamMember.getUser().getChatId());
            bot.sendMessage(sendMessage);
        }
    }
}
