package ru.sicuro.PlanningPokerBot.service.button;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Update;
import ru.sicuro.PlanningPokerBot.model.RegistrationState;
import ru.sicuro.PlanningPokerBot.model.User;
import ru.sicuro.PlanningPokerBot.reposirory.UserRepository;
import ru.sicuro.PlanningPokerBot.service.PlanningPokerBot;
import ru.sicuro.PlanningPokerBot.service.UserState;

import java.time.LocalDateTime;

@Slf4j
@Service
@AllArgsConstructor
public class RegisterButtonHandler implements ButtonHandler {

    private final UserRepository userRepository;

    @Override
    public String getCallbackData() {
        return "REGISTER_BUTTON";
    }

    @Override
    public void handle(Update update, PlanningPokerBot bot) {
        long chatId = update.getCallbackQuery().getMessage().getChatId();
        int messageId = update.getCallbackQuery().getMessage().getMessageId();

        // –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º –∫–æ—Ç–æ—Ä—ã –±—ã–ª —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω
        EditMessageText message = new EditMessageText();
        message.setChatId(chatId);
        message.setMessageId(messageId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        var queueUser = userRepository.findByChatId(chatId);
        User user;
        if (queueUser.isEmpty()) {
            String userName = update.getCallbackQuery().getMessage().getChat().getUserName();

            // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = registerUser(chatId, userName);
        } else {
            user = queueUser.get();
        }

        var registrationState = user.getRegistrationState();
        if (registrationState != null && registrationState.equals(RegistrationState.REGISTERED)) {
            message.setText("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ãüòä!");
            bot.sendMessage(message);
            return;
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.setRegistrationState(RegistrationState.WAITING_FOR_NAME);
        userRepository.save(user);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        message.setText("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è:");
        bot.sendMessage(message);
        log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å({}) –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", chatId);
        bot.setUserState(chatId, UserState.REGISTRATION_WAITING_FOR_NAME);
    }

    private User registerUser( long chatId, String userName) {
        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        User newUser = User.createUser(chatId, userName);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        userRepository.save(newUser);
        log.info("–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (–ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π): {}", newUser);

        return newUser;
    }

}
