package ru.sicuro.PlanningPokerBot.service.button.task;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Update;
import ru.sicuro.PlanningPokerBot.model.SessionTask;
import ru.sicuro.PlanningPokerBot.model.Task;
import ru.sicuro.PlanningPokerBot.model.TaskVote;
import ru.sicuro.PlanningPokerBot.model.User;
import ru.sicuro.PlanningPokerBot.reposirory.SessionTaskRepository;
import ru.sicuro.PlanningPokerBot.reposirory.TaskRepository;
import ru.sicuro.PlanningPokerBot.reposirory.TaskVoteRepository;
import ru.sicuro.PlanningPokerBot.reposirory.UserRepository;
import ru.sicuro.PlanningPokerBot.service.PlanningPokerBot;
import ru.sicuro.PlanningPokerBot.service.button.ButtonHandler;

import java.util.List;

@Slf4j
@AllArgsConstructor
@Service
public class TaskStartVoteVotedButtonHandler implements ButtonHandler {


    private final TaskRepository taskRepository;
    private final UserRepository userRepository;
    private final TaskVoteRepository taskVoteRepository;
    private final SessionTaskRepository sessionTaskRepository;

    @Override
    public String getCallbackData() {
        return "TASK_START_VOTE_VOTED_BUTTON";
    }

    @Override
    public void handle(Update update, PlanningPokerBot bot) {
        long chatId = update.getCallbackQuery().getMessage().getChatId();
        int messageId = update.getCallbackQuery().getMessage().getMessageId();
        String callbackQuery = update.getCallbackQuery().getData();
        String vote = callbackQuery.split(" ")[1];
        String taskId = callbackQuery.split(" ")[2];

        Task task = taskRepository.findById(Long.valueOf(taskId)).orElseThrow(() -> new IllegalArgumentException("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"));
        User user = userRepository.findByChatId(chatId).orElseThrow(() -> new IllegalArgumentException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!"));

        // –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º –∫–æ—Ç–æ—Ä—ã –±—ã–ª —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω
        EditMessageText message = new EditMessageText();
        message.setChatId(chatId);
        message.setMessageId(messageId);

        // –ü—Ä–æ–≤–µ—Ä–∏–º –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ –∑–∞–¥–∞—á–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        List<SessionTask> sessionTasks = sessionTaskRepository.findByTask(task);

        // –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        if (sessionTasks.isEmpty()) {
            message.setText("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∑–∞–¥–∞—á—É –∑–∞–∫—Ä—ã—Ç–æ! " + task.getView());
            bot.sendMessage(message);
            return;
        }

        message.setText("–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω! üéØ" + task.getTitle());

        // –ó–∞–ø–∏—à–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–ª–æ—Å–∞
        TaskVote taskVote = new TaskVote();
        taskVote.setTask(task);
        taskVote.setUser(user);
        taskVote.setVote(Integer.valueOf(vote));

        taskVoteRepository.save(taskVote);

        bot.sendMessage(message);
        log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å({}) –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ –∑–∞–¥–∞—á—É {}", chatId, taskVote);
    }
}
