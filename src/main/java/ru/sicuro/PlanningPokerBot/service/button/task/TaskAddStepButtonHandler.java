package ru.sicuro.PlanningPokerBot.service.button.task;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import ru.sicuro.PlanningPokerBot.model.Task;
import ru.sicuro.PlanningPokerBot.model.Team;
import ru.sicuro.PlanningPokerBot.model.User;
import ru.sicuro.PlanningPokerBot.reposirory.TaskRepository;
import ru.sicuro.PlanningPokerBot.reposirory.TeamRepository;
import ru.sicuro.PlanningPokerBot.reposirory.UserRepository;
import ru.sicuro.PlanningPokerBot.service.PlanningPokerBot;
import ru.sicuro.PlanningPokerBot.service.UserState;
import ru.sicuro.PlanningPokerBot.service.button.ButtonHandler;
import ru.sicuro.PlanningPokerBot.service.StepHandler;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@Slf4j
@Service
@AllArgsConstructor
public class TaskAddStepButtonHandler implements ButtonHandler, StepHandler {

    private static final Map<Long, Task> tempStorage = new ConcurrentHashMap<>();
    private final TeamRepository teamRepository;
    private final UserRepository userRepository;
    private final TaskRepository taskRepository;

    @Override
    public String getCallbackData() {
        return "TASK_ADD_STEP_BUTTON";
    }

    @Override
    public void handle(Update update, PlanningPokerBot bot) {
        long chatId = update.getCallbackQuery().getMessage().getChatId();
        int messageId = update.getCallbackQuery().getMessage().getMessageId();
        String callbackQuery = update.getCallbackQuery().getData();
        String teamId = callbackQuery.split(" ")[1];

        Team team = teamRepository.findById(Long.valueOf(teamId)).orElseThrow(() -> new IllegalArgumentException("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"));
        User user = userRepository.findByChatId(chatId).orElseThrow(() -> new IllegalArgumentException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!"));

        // –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º –∫–æ—Ç–æ—Ä—ã –±—ã–ª —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω
        EditMessageText message = new EditMessageText();
        message.setChatId(chatId);
        message.setMessageId(messageId);
        message.setText("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:");

        bot.sendMessage(message);
        log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å({}) –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã({})",
                user.getChatId(),
                team.getName());

        Task task = new Task();
        task.setTeam(team);
        tempStorage.put(chatId, task);
        bot.setUserState(chatId, UserState.ADDING_TASK_NAME);
    }


    @Override
    public void handleStep(Update update, PlanningPokerBot bot) {
        long chatId = update.getMessage().getChatId();
        var state = bot.getUserState(chatId);
        String messageText = update.getMessage().getText();

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∏–Ω–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∏–º
        if (state == UserState.ADDING_TASK_NAME) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            Task task = tempStorage.get(chatId);
            task.setTitle(messageText);

            bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ \"-\", —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):");
            bot.setUserState(chatId, UserState.ADDING_TASK_DESCRIPTION);

        } else if (state == UserState.ADDING_TASK_DESCRIPTION) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            Task task = tempStorage.get(chatId);
            task.setDescription(messageText.equals("-") ? null : messageText); // –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ - —Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ

            bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ \"-\", —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):");
            bot.setUserState(chatId, UserState.ADDING_TASK_LINK);

        } else if (state == UserState.ADDING_TASK_LINK) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –∑–∞–¥–∞—á–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ
            Task task = tempStorage.get(chatId);
            task.setLink(messageText.equals("-") ? null : messageText); // –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ - —Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
            task.setCreatedAt(LocalDateTime.now());

            taskRepository.save(task);

            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText("üéØ–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n" +
                    "–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë?");

            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rowsInLine = getListsButton(task.getTeam().getId());

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            markup.setKeyboard(rowsInLine);
            message.setReplyMarkup(markup);

            bot.sendMessage(message);
            bot.deleteUserState(chatId);
            tempStorage.remove(chatId);
            log.info("–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {}", task);
        }
    }

    private static List<List<InlineKeyboardButton>> getListsButton(Long chatId) {
        List<List<InlineKeyboardButton>> rowsInLine = new ArrayList<>();

        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        List<InlineKeyboardButton> rowInLine = new ArrayList<>();
        var button = new InlineKeyboardButton();
        button.setText("–î–ê");
        button.setCallbackData(String.format("TASK_ADD_STEP_BUTTON %s", chatId));
        rowInLine.add(button);
        rowsInLine.add(rowInLine);

        return rowsInLine;
    }
}
