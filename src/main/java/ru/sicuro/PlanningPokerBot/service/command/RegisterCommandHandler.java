package ru.sicuro.PlanningPokerBot.service.command;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.objects.Update;
import ru.sicuro.PlanningPokerBot.model.RegistrationState;
import ru.sicuro.PlanningPokerBot.model.Role;
import ru.sicuro.PlanningPokerBot.model.User;
import ru.sicuro.PlanningPokerBot.reposirory.UserRepository;
import ru.sicuro.PlanningPokerBot.service.PlanningPokerBot;

import java.time.LocalDateTime;

@Slf4j
@Service
@AllArgsConstructor
public class RegisterCommandHandler implements CommandHandler {
    private final UserRepository userRepository;

    @Override
    public String getCommandName() {
        return "/register";
    }

    @Override
    public void handle(Update update, PlanningPokerBot bot) {
        long chatId = update.getMessage().getChatId();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        var queueUser = userRepository.findByChatId(chatId);
        User user = queueUser.get();
        var registrationState = user.getRegistrationState();
        if (registrationState != null && registrationState.equals(RegistrationState.REGISTERED)) {
            bot.sendMessage(chatId, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ãüòä!");
            return;
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.setRegistrationState(RegistrationState.WAITING_FOR_NAME);
        userRepository.save(user);

        bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è:");
        log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å({}({})) –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", chatId, user.getUsername());
    }

    public void handleRegistrationStep(Update update, PlanningPokerBot bot) {
        long chatId = update.getMessage().getChatId();
        String messageText = update.getMessage().getText();

        var queueUser = userRepository.findByChatId(chatId);
        User user = queueUser.get();
        var state = user.getRegistrationState();

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∏–Ω–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã—Ö–æ–¥–∏–º
        if (state == null) {
            return;
        }

        if (RegistrationState.WAITING_FOR_NAME.equals(state)) {
            completeRegistration(user, messageText, bot);
        }
    }

    private void completeRegistration(User user, String fullName, PlanningPokerBot bot) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.setRegistrationState(RegistrationState.REGISTERED);
        user.setFullName(fullName);
        user.setRole(Role.MEMBER); // –î–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–¥–∞—ë–º —Ä–æ–ª—å MEMBER

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        userRepository.save(user);
        log.info("–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {}", user);

        bot.sendMessage(user.getChatId(), "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞üòä! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, " + fullName + "!");
    }
}
